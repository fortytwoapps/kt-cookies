buildscript {
    ext.production = (findProperty('prod') ?: 'false') == 'true'

    repositories {
        jcenter()
        maven { url = "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://bintray.com/kotlin/kotlin-eap/dokka" }
        maven { url = "https://kotlin.bintray.com/kotlinx" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:${frontendPluginVersion}"
    }
}

plugins {
    id "com.moowork.grunt" version "1.2.0"
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'kotlin2js'
apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlin-dce-js'
apply plugin: 'kotlinx-serialization'
apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.fortytwoapps.kt-cookies'
            from components.java
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/libs/kt-cookies-1.0.0.pom")
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url = "https://dl.bintray.com/kotlin/kotlin-eap" }
    maven { url = "https://plugins.gradle.org/m2/" }
    maven { url = "https://bintray.com/kotlin/kotlin-eap/dokka" }
    maven { url = "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serializationVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-js"
}

node {
    version = nodeJsVersion
    download = true
}

kotlinFrontend {
    npm {
        dependency("js-cookie", "2.2.0")
    }
    webpackBundle {
        bundleName = "main"
        contentPath = file('src/main/web')
        mode = "production"
    }

    define "PRODUCTION", production
}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
    kotlinOptions.sourceMap = !production
    kotlinOptions.moduleKind = 'umd'
}

task pot(type: GruntTask) {
    args = ["pot"]
}

task po2json(type: GruntTask) {
    args = ["default"]
    outputs.dir(file('build/js'))
    outputs.dir(file('build/kotlin-js-min/main'))
}

pot.dependsOn 'installGrunt'
pot.dependsOn 'npmInstall'
po2json.dependsOn 'installGrunt'
po2json.dependsOn 'npmInstall'

task copyResources(type: Copy) {
    from "src/main/resources"
    into file(buildDir.path + "/js")
}

task copyResourcesForDce() {
    doLast {
        copy {
            from "src/main/resources"
            ext.modulesDir = new File("${buildDir.path}/node_modules_imported/")
            modulesDir.eachDir {
                if (it.name.startsWith("kvision")) {
                    from(it) {
                        include "css/**"
                        include "img/**"
                        include "js/**"
                    }
                }
            }
            into file(buildDir.path + "/kotlin-js-min/main")
        }
    }
}

task dist(type: Copy, dependsOn: 'bundle') {
    from "src/main/web"
    from "${buildDir.path}/bundle"
    into file(buildDir.path + "/distributions/" + project.name)
}

task distZip(type: Zip, dependsOn: 'dist') {
    from(buildDir.path + "/distributions/" + project.name)
}

task buildApp(group: 'build', dependsOn: 'dist') {
    doLast {
        def targetDir = file(buildDir.path + "/distributions/" + project.name)
    }
}

task runApp(group: 'debug', dependsOn: [ 'buildApp' ]) {
    doLast {
        def osName = System.getProperty('os.name').toLowerCase()
        def isWindows = osName.contains('windows')

        def localNodeInstallDir = node.workDir.listFiles().find {
            it.name.startsWith('node-') && it.name.contains(node.version)
        }
    }
}

task bundleApp(group: 'build', dependsOn: buildApp) {
    doLast {
        def osName = System.getProperty('os.name').toLowerCase()

        def isWindows = osName.contains('windows')

        def localNodeInstallDir = node.workDir.listFiles().find {
            it.name.startsWith('node-') && it.name.contains(node.version)
        }
    }
}

afterEvaluate {
    if (production) {
        tasks.getByName("copyResourcesForDce") { dependsOn(runDceKotlinJs) }
    }
    tasks.getByName("webpack-bundle") {
        dependsOn(po2json, copyResources, copyResourcesForDce)
    }
    tasks.getByName("webpack-run") { dependsOn(po2json, copyResources) }
    tasks.getByName("karma-start") { dependsOn(po2json, copyResources) }
}
